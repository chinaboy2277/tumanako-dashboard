package com.tumanako.ui;


/************************************************************************************

Tumanako - Electric Vehicle and Motor control software <p>

Copyright (C) 2014 Jeremy Cole-Baker <jeremy@rhtech.co.nz> <p>

This file is part of Tumanako Dashboard. <p>

Tumanako is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published
by the Free Software Foundation, either version 3 of the License, or
(at your option) any later version. <p>

Tumanako is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details. <p>

You should have received a copy of the GNU Lesser General Public License
along with Tumanako.  If not, see <http://www.gnu.org/licenses/>. <p>

@author Jeremy Cole-Baker / Riverhead Technology <jeremy@rhtech.co.nz> <p>

*************************************************************************************/


import com.tumanako.dash.DashMessages;
import com.tumanako.dash.IDashMessages;

import android.content.Context;
import android.content.res.TypedArray;
import android.os.Bundle;
import android.util.AttributeSet;
import android.widget.LinearLayout;
import android.widget.TextView;




/**
 
 Text Box Class <p>
 
 Creates a simple control with a text box (implemented as a TextView). <p> 

 To Use: Place something like this in the XML layout file, preferably inside a
 horizontal LinearLayout: <p>
 
  <pre>
    <com.tumanako.ui.TextBox 
                 android:id="@+id/demoText"
                 android:layout_width="fill_parent"
                 android:layout_height="wrap_content"
                 android:gravity="center_horizontal"
                 android:textSize="18pt"
                 android:text="0.0"   />
  </pre> <p>
                  
 The above example creates a text box with 18pt text reading "0.0". <p>

 Note that there must also be a values\attrs.xml file which defines the custom 
 attributes: <p>

  <ul>
   <li>textbox_text           - Initial text for the text box
   <li>textbox_default_text   - Text to display when 'reset()' method is called. If omitted, "" is used. 
   <li>update_action          - Action string which this text box should respond to for updates. 
                                If an intent is received with this action, it should contain a string
                                value with the new contents for the text box (i.e. stringData should not 
                                be null). See DashMessages class for details.    
  </ul> <p>                  

   It should look like this: <p> 

  <pre>
    <?xml version="1.0" encoding="utf-8"?>
     <resources>
     
        <declare-styleable name="App">  
           <attr name="update_action"  format="string" />
        </declare-styleable>
             
        <declare-styleable name="TextBox">
           <attr name="textbox_text"           format="string" />
           <attr name="textbox_default_text"   format="string" />
        </declare-styleable>  
        
    </resources>  
  <pre> <p>
 
 To access from code, use something like this: <p> 
 
  <pre>
    private TextBox demoText;
    demoText = (Text) findViewById(R.id.demoText);
    demoText.setText("Hello World!");
  </pre> <p>
    
 Other public methods: <p>
 
  <ul>
   <li>setText(String)
   <li>String getText()
   <li>void reset()
  </ul>
  

 @author Jeremy Cole-Baker / Riverhead Technology

***************************************************************************************/




public class TextBox extends LinearLayout implements IDashMessages
  {
 
  private String defaultText;
  private String updateAction;

  private final TextView itemView;
  
  private DashMessages dashMessages; 
  
  
  
  /**
   TextBox Constructor <p>
   
   Called when this view is created, probably from inflating
   an XML layout file.  Context and attributes are passed on
   to super class constructor for basic creation of the view,
   then custom components are added. 
     
   @param context  Application Context - used to create widgets and set up DashMessages.
    
   @param attrs    Attribute set generated by XML parser. Includes custom attributes. 
    
  *****************************************************************/
  public TextBox(Context context, AttributeSet attrs)
    {
    
    // Call the super class constructor to create a basic layout: 
    super(context, attrs);
    
    // Generate new TextView for the the text box: 
    itemView = new TextView(context, attrs);
       
    // Add the new text box to this layout: 
    addView(itemView);

    // Get custom attributes from XML file:
    getCustomAttributes(attrs);
    
    // Set up a DashMessages class to recieve intents:
    String [] messageFilters = { updateAction, UIActivity.UI_RESET };
    dashMessages = new DashMessages( context, this, messageFilters );
    
    }

  
  
  
  
  
  /**
   Set Text Method <p>
   Sets the main text of the control.
    @param text  Text to display.
  ****************************************/
  public void setText(String text)
    {  itemView.setText(text);  }
  
  
  
  /**
   Get Text Method <p>
   Returns the current text in the control
    @return Current text
  *************************************************/
  public String getText()
    {  return String.valueOf(itemView.getText());  }
  

  
  
  /**
   Reset Method
   Sets the text box to its default value.
  ***************************************/
  public void reset()
    {  
    if (defaultText != null) itemView.setText(defaultText);
    else                     itemView.setText("");
    }

  
  
  
  
  
  
  

  
  /**
   Extract custom attributes from XML layout <p>
   
   Given a set of attributes from the XML layout file, extract
   the custom attributes specific to this control.
    
    @param attrs  Attributes passed in from the XML parser 
  *******************************************************************/
  private void getCustomAttributes(AttributeSet attrs)
    { 
    String text;
    TypedArray a = getContext().obtainStyledAttributes( attrs, R.styleable.TextBox);
    text         = a.getString(R.styleable.TextBox_textbox_text);
    defaultText  = a.getString(R.styleable.TextBox_textbox_default_text);
    a.recycle();    // Recycle the TypedArray.

    a = getContext().obtainStyledAttributes( attrs, R.styleable.App);
    updateAction = a.getString(R.styleable.App_update_action);
    a.recycle();    // Recycle the TypedArray.
    
    if (text == null) text = "";                // If no text specified, use "". 
    itemView.setText(text);
    
    if (defaultText == null)  defaultText  = text;            
       // ...If default text not specified, revert to text attribute, which may actually be "". 

    if (updateAction == null) updateAction = UIActivity.UI_NOTHING;  
       // ...Default UI update action if no action specified. This indicates that no update action should be taken.
       //    UIActivity.UI_NOTHING should not be used in any actual intent. 
    
    }

  
  
  



  public void messageReceived(String action, Integer intData, Float floatData, String stringData, Bundle bundleData)
    {
    if (action.equals(UIActivity.UI_RESET))
      {
      // RESET intent has been received: 
      reset();
      }
    else
      {
      // UPDATE intent: Set our text to the text contained in the stringData parameter:
      String format;
        
      // Test whether integer data or float data have been supplied. If they have, 
      // generate a formatted string from the numeric data (using stringData as the 
      // format string if it exists): 
      if (null != intData) 
        {
        if (null != stringData) format = stringData;
        else                    format = "%d";
        itemView.setText( String.format(format, intData) );
        return;
        }
      
      if (null != floatData) 
        {
        if (null != stringData) format = stringData;
        else                    format = "%.1f";
        itemView.setText( String.format(format, floatData) );
        return;
        }

      // No int or float data. Try string data:
      if (null != stringData) itemView.setText(stringData);

      }
    }
  
  
  
  }  // Class
